package jhz.pattern.template;
/**
 * 模板模式
 * 　模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。
 * 不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。
 * @author zhj
 * @version 1.0.0
 * @date 2018年4月17日 上午10:26:57
 */
public class Template {
	/**
	 * 
	 * 这里涉及到两个角色：
　　抽象模板(Abstract Template)角色有如下责任：
　　■　　定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。
　　■　　定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。
　　具体模板(Concrete Template)角色又如下责任：
　　■　　实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。
　　■　　每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。
	
        模板方法模式在Servlet中的应用
　　使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。
   HttpService类提供了一个service()方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的模板方法模式
   HttpServlet担任抽象模板角色
　　　　模板方法：由service()方法担任。
　　　　基本方法：由doPost()、doGet()等方法担任。
　　TestServlet担任具体模板角色
　　　　TestServlet置换掉了父类HttpServlet中七个基本方法中的其中两个，分别是doGet()和doPost()。
	
	 优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。
	 缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。
	 * 
	 * 
	 */

}
